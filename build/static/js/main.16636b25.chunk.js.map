{"version":3,"sources":["components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["window","jQuery","$","Main","Encrypt","event","preventDefault","y","document","getElementById","value","_this","props","access","methods","encrypt","send","from","account","gas","gasPrice","on","receipt","setState","Loading","Get_Hash","x","get_hash","call","then","data","innerHTML","Decrypt","show","decrypt","Del_Hash","del_hash","ready","hide","click","react_default","a","createElement","className","id","this","htmlFor","required","placeholder","type","onClick","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Secret","networks","Contract","abi","address","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.16636b25.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport $ from \"jquery\";\r\nwindow.jQuery = $;\r\nclass Main extends Component{\r\n    componentDidMount(){\r\n        $(document).ready(function(){\r\n            $(\"#Reciever\").hide();\r\n            $(\"#sw1\").click(function(){\r\n                $(\"#Sender\").hide();\r\n                $(\"#Reciever\").show(1000);\r\n            });\r\n            $(\"#sw4\").click(function(){\r\n                $(\"#Reciever\").hide();\r\n                $(\"#Sender\").show(1000);\r\n            });\r\n        });\r\n    }\r\n    Encrypt = (event) =>{\r\n        event.preventDefault();\r\n        const y = document.getElementById('rec_mes').value\r\n        this.props.access.methods.encrypt(y).send({from : this.props.account,gas: 1500000,gasPrice : 100}).on('confirmation',(receipt) =>{\r\n\t    \tthis.setState({Loading : false})\r\n\t    })\r\n    }\r\n    Get_Hash = (event) =>{\r\n        event.preventDefault();\r\n        const x = document.getElementById('recieve');\r\n        this.props.access.methods.get_hash().call().then((data)=>{\r\n            x.innerHTML = data;\r\n        });\r\n    }\r\n    Decrypt = (event) =>{\r\n        event.preventDefault();\r\n        const x = document.getElementById('hash_add').value;\r\n        const show = document.getElementById('recover');\r\n        this.props.access.methods.decrypt(x).call().then((data) =>{\r\n            show.innerHTML = data;\r\n        });\r\n    }\r\n    Del_Hash = (event) =>{\r\n        event.preventDefault();\r\n        const x = document.getElementById('hash_add').value;\r\n        this.props.access.methods.del_hash(x).send({from : this.props.account,gas: 1500000,gasPrice : 100}).on('confirmation',(receipt) =>{\r\n\t    \tthis.setState({Loading : false})\r\n\t    })\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <nav className=\"navbar navbar-expand bg-light mb-5\">\r\n                    <a className=\"brand text-decoration-none text-dark\">Encrypt-Decrypt</a>\r\n                </nav>\r\n                <div className=\"card mx-auto w-75 text-center my-auto\" id=\"Sender\">\r\n                    <div className=\"card-header\" id=\"header\">\r\n                        <div className=\"text-right ml-auto\">\r\n                            <button className=\"btn btn-outline-light text-dark\" id=\"sw1\">Reciever</button>\r\n                            <button className=\"btn btn-outline-light text-danger\">Sender</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <small>Current Account : {this.props.account}</small>\r\n                        <form className=\"form mt-5 mb-3\">\r\n                            <label className=\"label\" htmlFor=\"rec_mes\">Secret Message</label>\r\n                            <input className=\"form-control w-75 mx-auto mb-5\" required placeholder=\"Enter Message\" id=\"rec_mes\"/>\r\n                            <button className=\"btn btn-outline-dark\" type=\"sumbit\" onClick={this.Encrypt}>Encrypt</button><br/><br/>\r\n                            <button className=\"btn btn-outline-dark\" type=\"sumbit\" onClick={this.Get_Hash}>Get Hash</button>\r\n                        </form>\r\n                        <small><b id=\"recieve\"></b></small>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card mx-auto w-75 text-center my-auto\" id=\"Reciever\">\r\n                    <div className=\"card-header\" id=\"header\">\r\n                        <div className=\"text-right ml-auto\">\r\n                            <button className=\"btn btn-outline-light text-danger\">Reciever</button>\r\n                            <button className=\"btn btn-outline-light text-dark\" id=\"sw4\">Sender</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                    <small>Current Account : {this.props.account}</small>\r\n                        <form className=\"form mt-5 mb-3\">\r\n                            <label className=\"label\" htmlFor=\"hash_add\">Hash Address</label>\r\n                            <input className=\"form-control w-75 mx-auto mb-5\" required placeholder=\"Enter Address\" id=\"hash_add\"/>\r\n                            <button className=\"btn btn-outline-dark\" type=\"sumbit\" onClick={this.Decrypt}>Decrypt</button><br/><br/>\r\n                            <button className=\"btn btn-outline-dark\" type=\"sumbit\" onClick={this.Del_Hash}>Delete Hash</button>\r\n                        </form>\r\n                        <small><b id=\"recover\"></b></small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Main","import React,{Component} from \"react\";\r\nimport \"./App.css\";\r\nimport Main from './Main.js';\r\nimport $ from \"jquery\";\r\nimport Web3 from 'web3';\r\nimport Secret from '../abis/Secret.json';\r\nwindow.jQuery = $;\r\nclass App extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\taccount: null,\r\n\t\t\tLoading: true,\r\n\t\t\taccess: null\r\n\t\t}\r\n\t}\r\n\tasync componentWillMount(){\r\n\t    await this.loadWeb3()\r\n\t    await this.loadBlockchainData()\r\n\t}\r\n\tasync loadWeb3() {\r\n\t    if (window.ethereum) {\r\n\t      window.web3 = new Web3(window.ethereum)\r\n\t      await window.ethereum.enable()\r\n\t    }\r\n\t    else if (window.web3) {\r\n\t      window.web3 = new Web3(window.web3.currentProvider)\r\n\t    }\r\n\t    else {\r\n\t      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n\t    }\r\n\t}\r\n\tasync loadBlockchainData() {\r\n      const web3 = window.web3\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({account : accounts[0]})\r\n      const networkId = await web3.eth.net.getId()\r\n      const networkData = Secret.networks[networkId]\r\n      if(networkData) {\r\n      \tthis.setState({Loading : false})\r\n        const access = web3.eth.Contract(Secret.abi, networkData.address)\r\n        this.setState({access : access})\r\n      }else{\r\n      \talert(\"Connect it to your localhost (Ganache) !!\")\r\n      }\r\n    }\r\n\trender(){\r\n\t\treturn (\r\n\t\t\tthis.state.Loading ? <div id=\"Loading\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-muted\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-primary\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-success\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-info\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-warning\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-danger\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-secondary\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-dark\"></div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"spinner-grow text-light\"></div>\r\n\t\t\t\t\t\t\t\t </div>:\r\n\t\t\t\t\t\t\t\t <div>\r\n\t\t\t\t\t\t\t\t\t <Main\r\n\t\t\t\t\t\t\t\t\t account = {this.state.account}\r\n\t\t\t\t\t\t\t\t\t access = {this.state.access}\r\n\t\t\t\t\t\t\t\t\t Loading = {this.state.Loading}/>\r\n\t\t\t\t\t\t\t\t </div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}